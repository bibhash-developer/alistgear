<?php

namespace App\Http\Controllers;

use App\Scholar;
use Illuminate\Http\Request;
use App\Models\tbl_parent_info;
use App\Models\tbl_children_releation;
use App\Models\tbl_parents_releation;
use App\Models\tbl_collaborators;
use Goutte\Client; 
use Response;
use DB;

class ScrapingController extends Controller
{
    /** 
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Client $client)
    {
       
        $html = file_get_contents('https://neurotree.org/neurotree/peopleinfo.php?pid=985');

        $pokemon_doc = new \DOMDocument();
        libxml_use_internal_errors(TRUE); 

        if(!empty($html))
        { 
            $pokemon_doc->loadHTML($html);
            libxml_clear_errors();   
            $pokemon_xpath = new \DOMXPath($pokemon_doc);
            $pokemon_row = $pokemon_xpath->query("//*[contains(@class, 'leftcol')]//div[1]//div[1]//tr/td/a/@href");

            if($pokemon_row->length > 0)
            {
                foreach($pokemon_row as $row)
                {
                  $datalink = $row->nodeValue;
                  $id       = explode("=", $datalink);
                    if(is_numeric($id['1']))
                    {
                      $this->ParentInfo($id['1']);
                    } 
                }
            }
        }
        
            $id['id']  = tbl_parents_releation::allParentChildrenParent();

                foreach ($id['id'] as $id) 
                {
                   
                     $this->get_collaborators($id->pid);
                }
      }
    

  /*......................... Parent informeation save...................*/

     public function ParentInfo($id)
     {
        $client    = new\Goutte\Client();
        $crawler   = $client->request('GET', 'https://neurotree.org/neurotree/peopleinfo.php?pid='.$id);
        
        $fullname  = $crawler->filter('.personinfo h1')->text();  
        $location  = $crawler->filter('.personinfo tr')->text();
        //$message   = $crawler->filter('.boxinline h5')->eq(2)
                                                //->text('h5');

          if ($crawler->filter('.boxinline img[src]')->count() > 0 ) 
            {
              $imageLink = $crawler->filter('.boxinline img[src]')
                                    ->attr('src');
              $imgName = 'css/'.basename($imageLink);
            }else
            {
              $imageLink =0;

            }

        $location  = explode(":", $location); 

        /*------------------   Add  Collaborators ------------------*/

          $this->get_collaborators($id);

         $data      = array(
                           'pid'   => trim($id),
                           'name'   =>trim($fullname), 
                           'address' =>trim($location[1]),
                           'status'  =>0, 
                           'image_name' => trim($imageLink),
                          );
                        
              
        $dublicateParent = tbl_parent_info::DublicateParentInfo($id);
        $lastInsertedID =  $dublicateParent;  

          if(empty($dublicateParent))
          {
             $lastInsertedID = tbl_parent_info::parent_info($data);
              session()->put('lastInsertedID', $lastInsertedID);
              $lastInsertedID =  session()->get('lastInsertedID');
              $tableName= "parent";             
              $WebsiteLink = $this->WebsiteLink($id, $tableName);

               
          }
           $this->ParentChildrenInfo($id,$lastInsertedID);
          
               
      }
    
    /*.................. Parent to Children informeation save ..............*/


    public function ParentChildrenInfo($idd,$parentId)
      {
          $html          = file_get_contents("https://neurotree.org/neurotree/peopleinfo.php?pid=".$idd."");
          $pokemon_doc   = new \DOMDocument();
          libxml_use_internal_errors(TRUE); 
          $pokemon_doc->loadHTML($html);
          libxml_clear_errors(); 
          $pokemon_xpath = new \DOMXPath($pokemon_doc);
          $pokemon_row1  = $pokemon_xpath->query("//*[contains(@class, 'leftcol')]//div[2]//div[1]//tr/td/a/@href");
          foreach ($pokemon_row1 as $value) 
          {
              $datalink = $value->nodeValue;
              $id       = explode("=", $datalink);                 
              if(is_numeric($id['1']))
              {                
                  $clientChildren    = new\Goutte\Client();
                  $crawlerChildren   = $clientChildren->request('GET', 'https://neurotree.org/neurotree/peopleinfo.php?pid='.$id['1']);
                  $children          = $crawlerChildren->filter('.personinfo h1')->text();
                  $children_location = $crawlerChildren->filter('.personinfo tr')->text();
                  $children_location = explode(":", $children_location); 

              if ($crawlerChildren->filter('.boxinline img[src]')->count() > 0) 
                      {
                        $imageLink = $crawlerChildren->filter
                                           ('.boxinline img[src]')->attr('src');
                      }else
                      {
                        $imageLink =0;
                      }

                  $child_recourd     = array('pid'   => trim($id['1']),
                     'people_id'=>trim($parentId), 
                    'children_name'=>trim($children), 'address' =>
                     trim($children_location[1]), 'image_name' => 
                       trim($imageLink));
                   
                    //print_r($child_recourd); exit;
              $dublicateChildren = tbl_children_releation::DublicateChildren($id['1'], 
                $parentId);
              $childreanid = $dublicateChildren;

              if(empty($dublicateChildren))
              {
                  $childreanid    =     tbl_children_releation::
                                        children_releation($child_recourd);

                  session()->put('childreanid', $childreanid);
                  $childreanid =  session()->get('childreanid');

                    /*---------   Add  Weblink ----------*/

                $tableName   = "children";  
                      
                 $WebsiteLink = $this->WebsiteLink($id['1'], $tableName); 

                 /*---------   Add  Collaborators ----------*/
                  
                  $this->get_collaborators($id['1']);

                  } 
                     
                    $this->Children_to_ParentsInfo($id['1'], $childreanid,$parentId); 
           }  
      }      
   }

   public function Children_to_ParentsInfo($iddd,$chlidrenid,$parentid)
    {
      $html         = file_get_contents("https://neurotree.org/neurotree/peopleinfo.php?pid=".$iddd."");
      $pokemon_doc  = new \DOMDocument();
      libxml_use_internal_errors(TRUE); 
      $pokemon_doc->loadHTML($html);
      libxml_clear_errors(); 
      $pokemon_xpath3 = new \DOMXPath($pokemon_doc);
      $pokemon_row3   = $pokemon_xpath3->query("//*[contains(@class, 'leftcol')]//div[1]//div[1]//tr/td/a/@href");
      foreach ($pokemon_row3 as $value) 
      {
        $datalink3 = $value->nodeValue;
        $id        = explode("=", $datalink3);
            if(is_numeric($id['1']))
            {
                      $clientParents        = new\Goutte\Client();
                      $crawlerParents       = $clientParents ->request('GET', 'https://neurotree.org/neurotree/peopleinfo.php?pid='.$id['1']);
                      $parents_releation    = $crawlerParents->filter(
                                               '.personinfo h1')->text(); 

                      $parents_location     = $crawlerParents->filter(
                                               '.personinfo tr')->text();
                      $parents_location     = explode(":", $parents_location); 
                      
                      $parents_address  = $parents_location[1];
                       //print_r($parents_location[1]); exit;

                       if ($crawlerParents->filter('.boxinline img[src]')
                                          ->count() > 0) 
                          {
                            $imageLink = $crawlerParents->filter
                                               ('.boxinline img[src]')->attr('src');
                          }else
                          {
                            $imageLink =0;
                          }
                         
                         $pid = trim($id['1']);

                        $parents = array(
                              'pid' =>trim($id['1']),
                              'super_parent_id'=>trim($parentid),
                              'children_id'=>trim($chlidrenid), 
                              'parents_name'=>trim('". $parents_releation."'), 
                              'address' => "'". $parents_address ."'",
                              'image_name' =>"'". $imageLink ."'"
                              );


                $dubChildrenParent=tbl_parents_releation::dubChildrenParent($id['1'],
              $chlidrenid);
            
                if(empty($dubChildrenParent))
                {

                 $lastInsertedID = tbl_parents_releation::parent_to_children_releation(
                  $pid, $parentid, $chlidrenid, 
                  $parents_releation, $parents_address, $imageLink);

                 $tableName= "childrentoparent";             
                 $this->WebsiteLink($id['1'], $tableName);
                 
                }
            }
      }   
    }

     public function get_collaborators($id)
     {
        
               $html2 = file_get_contents('https://neurotree.org/neurotree/peopleinfo.php?pid='.$id);

                $pokemon_doc2 = new \DOMDocument();
                libxml_use_internal_errors(TRUE); 

                if(!empty($html2))
                { 
                    $pokemon_doc2->loadHTML($html2);
                    libxml_clear_errors();   
                    $pokemon_xpath2 = new \DOMXPath($pokemon_doc2);
                    $pokemon_row2 = $pokemon_xpath2->query("//*[contains(@class, 'leftcol')]//div[3]//div[1]//tr/td/a/@href");

                    if($pokemon_row2->length > 0)
                    {
                        foreach($pokemon_row2 as $row2)
                        {
                          $collaborators2 = $row2->nodeValue;

                          $datalink = $row2->nodeValue;
              
                         $id2     = explode("=", $datalink);

                          if(is_numeric($id2['1']))
                          {
                            $this->Collaborators($id, $id2['1']);
                          } 
                        }
                    }
                }
       }
   
  public function Collaborators($id, $id1)
     {
        $client    = new\Goutte\Client();
        $crawler   = $client->request('GET', 'https://neurotree.org/neurotree/peopleinfo.php?pid='.$id1);
        $fullname  = trim($crawler->filter('.personinfo h1')->text());  
        $location  = trim($crawler->filter('.personinfo tr')->text());
        //$Website   = $crawler->filter('.boxinline a[href]')->eq(1)
                                                                 //->text('href');
          if ($crawler->filter('.boxinline img[src]')->count() > 0 ) 
            {
              $imageLink = $crawler->filter('.boxinline img[src]')
                                    ->attr('src');
              $imgName = 'css/'.basename($imageLink);
            }else
            {
              $imageLink =0;

            }

          $location       = explode(":", $location); 
     
          $collaborators  = array(
                           'rel_pid'   => trim($id),
                           'pid'       => trim($id1),
                           'collaborators_name'  =>trim($fullname), 
                           'address' =>trim($location[1]), 
                           'image_name' => trim($imageLink),
                         );

         if(isset($collaborators))
              {
                 $dublicateCheck = tbl_collaborators::dublicateCheck($id, 
                                      $id1);
                 if(empty($dublicateCheck))
                 {
                  
          $lastInsertedID = tbl_collaborators::add_collaborators($collaborators);
                 }
             
            }      
      }


    public function WebsiteLink($pid, $tableName)
      {
          
         $html5 = file_get_contents('https://neurotree.org/neurotree/peopleinfo.php?pid='.$pid);
            
                $pokemon_doc5 = new \DOMDocument();
                libxml_use_internal_errors(TRUE); 

                if(!empty($html5))
                { 
                    $pokemon_doc5->loadHTML($html5);
                    libxml_clear_errors();   
                    $pokemon_xpath5 = new \DOMXPath($pokemon_doc5);
                    $pokemon_row5 = $pokemon_xpath5->query("//*[contains(@class, 'personinfo')]/a");

                    if($pokemon_row5->length > 0)
                    {
                        foreach($pokemon_row5 as $row5)
                        {
                          $wblink = $row5->nodeValue;
                         
                            if(strstr($wblink, "http://"))
                              {
                                 $wblink  = $wblink;
                                
                                if($tableName == "parent")
                                {
                                 
                                 tbl_parent_info::parentwebLink($pid, $wblink);
                                 return true;
                                }elseif($tableName == "children")
                                {

                                tbl_children_releation::childrenwebLink($pid, $wblink);
                                 return true;
                                }elseif($tableName == "childrentoparent")
                                {
                                  
                                tbl_parents_releation::chToParwebLink($pid, $wblink);
                                return true;
                                }
                                  
                              }
                         
                        }
                 }
            }
      }
}